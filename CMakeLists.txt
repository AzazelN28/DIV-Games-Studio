# CMAKE lists file for DIV GAMES STUDIO
# (c) 2015 Mike Green  
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(div2015)

SET(BUILD_LEVEL " -O2 ")
#-ggdb3 -O0 ")

#-ggdb3 -O0 ")
#-ggdb3 -O0")
#-O2")
#-ggdb3 -O0")
#-ggdb3 -O3 ")
#ggdb3 -O0 ") 
#"-O3 ")

SET(DLL_EXT ".so")

IF(APPLE)
SET (PLATFORM "OSX")
SET (TARGETOS "OSX")
FILE(GLOB OSX_SOURCES "src/osx/*.c")
SET(OSDEP ${OSDEP} ${OSX_SOURCES} "src/shared/osdep.c" "src/shared/unzip.c")
INCLUDE_DIRECTORIES("src/osx")
ENDIF()

IF(TARGETOS STREQUAL "PI")
INCLUDE ( tools/pi.cmake )
ENDIF()

IF(TARGETOS STREQUAL "PANDORA")
INCLUDE ( tools/pandora.cmake )
ENDIF()

IF(TARGETOS STREQUAL "GCW")
INCLUDE ( tools/gcw.cmake )
ENDIF()

IF(TARGETOS STREQUAL "GP2X")
INCLUDE ( tools/gp2x.cmake )
ENDIF()


IF(TARGETOS STREQUAL "AMIGA")
INCLUDE ( tools/amiga.cmake )
ENDIF()

IF(TARGETOS STREQUAL "PS2")
INCLUDE ( tools/ps2.cmake )
ENDIF()


IF(TARGETOS STREQUAL "WINDOWS")
INCLUDE ( tools/win.cmake )
SET(DLL_EXT ".dll")
ENDIF()

IF(NOT OSDEP)
SET(OSDEP "src/shared/osdep.c")
ENDIF()

SET(DLLSRC "src/shared/mikedll.c")

FILE(GLOB SHARED_RUN "src/shared/run/*.c")

SET(SHARED_RUN ${SHARED_RUN} "src/shared/unzip.c")

# The name of our binary
IF(NOT DEFINED TARGET)
	SET(TARGET "div") 
ENDIF()

IF(NOT DEFINED PLATFORM OR PLATFORM STREQUAL "AUTO")
	SET(PLATFORM "LINUX")
ENDIF()


SET(RUNTIME "divrun-${PLATFORM}")
SET(D1RUNTIME "div1run-${PLATFORM}")
SET(DEBUG "divdbg-${PLATFORM}")
SET(RUNNER "d-${PLATFORM}")

INCLUDE(FindPkgConfig)

PKG_SEARCH_MODULE(SDL REQUIRED sdl)
IF(TARGETOS STREQUAL "WINDOWS")
SET(RUNNER "d.exe")
ELSE()
PKG_SEARCH_MODULE(SDLMIXER REQUIRED SDL_mixer>=1.2.0)
PKG_SEARCH_MODULE(SDLIMAGE REQUIRED SDL_image>=1.2.0)
ENDIF()
include_directories(${SDL_INCLUDE_DIRS})
include_directories(${SDLIMAGE_INCLUDE_DIRS})
include_directories(${SDLMIXER_INCLUDE_DIRS})

set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")


set(EXTRA_LIBS ${SDL_LIBRARIES})
IF(TARGETOS STREQUAL "WINDOWS")
#SET(EXTRA_LIBS ${EXTRA_LIBS} ${SDLMIXER_LIBRARIES})
SET(PLATFORM_LIBS "jpeg" "m" "z" "SDL_mixer")
# "mingw32" "SDL" "SDLMain" "mingw32")
ELSE()
SET(EXTRA_LIBS ${EXTRA_LIBS} ${SDLIMAGE_LIBRARIES} ${SDLMIXER_LIBRARIES})
SET(PLATFORM_LIBS "jpeg" "m" "z" "dl")
#	 "mad" "mikmod" "vorbisfile"  "ogg" "vorbis" "FLAC")

ENDIF()

#SET(PLATFORM_LIBS "jpeg" "m" "z" "mingw32" "SDL" "SDLMain" "mingw32")

# include our SDL stuff
# this includes TTF
#IF(SDL GREATER 0)
#	MESSAGE("-- Including SDL(${SDL})")
#	SET(TARGET ${TARGET}-SDL${SDL})
#	INCLUDE (tools/sdl.cmake)
#ENDIF()

# default definitions
ADD_DEFINITIONS( -D_GNU_SOURCE)

INCLUDE_DIRECTORIES(src/shared src/)
SET(RUNNER_SOURCES "src/runner/r.c")
FILE(GLOB DIV_SOURCES "src/*.c")
FILE(GLOB DLL_SOURCES "dll/*.c")
FILE(GLOB VISOR_SOURCES "src/visor/*.c")
FILE(GLOB RUNTIME_SOURCES "src/runtime/*.c")
FILE(GLOB DEBUG_SOURCES "src/runtime/debug/*.c")
FILE(GLOB DIV1RUN_SOURCES "src/div1run/*.c")

#FILE(GLOB JUDAS_SOURCES "src/judas/*.c")
#SET(JUDAS_SOURCES "src/judas/judaswav.c" "src/judas/judas.c" ) 

IF ( MODE8 ) 
FILE(GLOB VPE_SOURCES "src/runtime/vpe/*.c")
ENDIF()

#INCLUDE (tools/plugins.cmake)

#ADD_DEFINITIONS( -D${PLATFORM} -DMIXER )

SET(TARGET ${TARGET}-${PLATFORM} ) #-${GIT_BRANCH}-${GIT_COMMIT_HASH})

SET(DEMOTARGET ${TARGET}-DEMO ) #-${GIT_BRANCH}-${GIT_COMMIT_HASH})

# make this a c++ app
#IF(CPLUSPLUS) 
SET_SOURCE_FILES_PROPERTIES(${SHARED_RUN} $(DLL_SOURCES) ${DLLSRC} ${RUNNER_SOURCES} ${VPE_SOURCES} ${RUNTIME_SOURCES} ${DIV1RUN_SOURCES} ${DEBUG_SOURCES} ${DIV_SOURCES} ${VISOR_SOURCES} ${JUDAS_SOURCES} ${OSDEP} PROPERTIES LANGUAGE CXX)
ADD_DEFINITIONS(  ${BUILD_LEVEL} -fno-omit-frame-pointer -fpermissive -funsigned-char -w -Wno-unused -DTARGET="${TARGET}" -DRDEBUG="${DEBUG}" -DRUNTIME="${RUNTIME}")
# -DJPGLIB)


#ADD_DEFINITIONS(-DDIVDLL)


#ADD_DEFINITIONS( -DSPRITEGEN )

IF(NOT TARGETOS STREQUAL "WINDOWS")
ADD_DEFINITIONS( -D_GNU_SOURCE=1 -DZLIB -DDIVDLL -DMIXER )
#-DJPGLIB )
#-DSPRITEGEN )
#-DJPGLIB )
# -DDIVDLL)
ENDIF()

IF(APPLE)
ADD_DEFINITIONS( -ferror-limit=1 -D__WORDSIZE=64 )
SET( CMAKE_EXE_LINKER_FLAGS  "-lSDLmain -framework SDL -framework Cocoa" )
ELSE()
ADD_DEFINITIONS( -Wfatal-errors )
ENDIF()

IF(AMIGA)
SET( CMAKE_EXE_LINKER_FLAGS  "-noixemul" )
ENDIF()

#SET( CMAKE_EXE_LINKER_FLAGS  ${CMAKE_EXE_LINKER_FLAGS}  )
#set ( CMAKE_CXX_FLAGS "-mwindows")

#SET (TARGET ${TARGET}-CXX)
#ENDIF()


ADD_EXECUTABLE(
	${TARGET} 
	src/global.h
	${VISOR_SOURCES}
	${DIV_SOURCES} 
	${JUDAS_SOURCES}
	${OSDEP}
	${DLLSRC}
)
#
#ADD_EXECUTABLE(
#	${DEMOTARGET} 
#	src/global.h
#	${VISOR_SOURCES}
#	${DIV_SOURCES} 
#	${JUDAS_SOURCES}
#	${OSDEP}
#	${DLLSRC}
#)


ADD_EXECUTABLE(
	${RUNTIME} 
	src/runtime/inter.h
	${RUNTIME_SOURCES} 
	${VPE_SOURCES} 
	${JUDAS_SOURCES}
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
)

ADD_EXECUTABLE(
	${D1RUNTIME} 
	src/div1run/inter.h
	${DIV1RUN_SOURCES} 
	${VPE_SOURCES} 
	${JUDAS_SOURCES}
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
)

ADD_EXECUTABLE(
	${DEBUG} 
	src/runtime/inter.h src/runtime/include.div
	${RUNTIME_SOURCES} 
	${DEBUG_SOURCES} 
	${VPE_SOURCES}
	${JUDAS_SOURCES} 
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
)

ADD_EXECUTABLE(
	${RUNNER}
	${RUNNER_SOURCES}
)

IF ( MODE8 ) 
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDEBUG -DMODE8)
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE -DMODE8)
ELSE()
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDEBUG)
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE )
ENDIF()

#TARGET_COMPILE_DEFINITIONS( ${DEMOTARGET} PRIVATE -DSHARE )
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE -DDIV2 )
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDIV2 )
TARGET_COMPILE_DEFINITIONS( ${D1RUNTIME} PRIVATE -DDIV1 )

# -Isrc/div1run")
get_target_property(COMMON_INCLUDE ${D1RUNTIME} INCLUDE_DIRECTORIES)
set_property(TARGET ${D1RUNTIME} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/div1run" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")
set_property(TARGET ${DEBUG} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/runtime" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")
set_property(TARGET ${RUNTIME} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/runtime" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")

#set_target_properties(${D1RUNTIME} PROPERTIES COMPILE_FLAGS "-Isrc/shared")


IF(NOTYET) 
find_package( ZLIB REQUIRED )
if ( ZLIB_FOUND )
    include_directories( ${ZLIB_INCLUDE_DIRS} )
    target_link_libraries( ${TARGET} ${ZLIB_LIBRARIES} )
    target_link_libraries( ${RUNTIME} ${ZLIB_LIBRARIES} )
    target_link_libraries( ${DEBUG} ${ZLIB_LIBRARIES} )

endif( ZLIB_FOUND )
ENDIF()

TARGET_LINK_LIBRARIES(${TARGET} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS} )
#TARGET_LINK_LIBRARIES(${DEMOTARGET} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS} )
TARGET_LINK_LIBRARIES(${RUNTIME} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS})
TARGET_LINK_LIBRARIES(${D1RUNTIME} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS})
TARGET_LINK_LIBRARIES(${DEBUG} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS})


SET_DIRECTORY_PROPERTIES(PROPERTIES  ADDITIONAL_MAKE_CLEAN_FILES system/${TARGET} system/{$DEBUG} system/{$RUNNER} CMakeCache.txt CMakeFiles )

#ADD_CUSTOM_COMMAND(
#	TARGET ${TARGET}
#	COMMENT "-- Linking Executable ${TARGET}"
#	PRE_LINK
#)

IF(TARGETOS STREQUAL "WINDOWS")
#ADD_CUSTOM_COMMAND(
#	TARGET ${RUNNER}
#	DEPENDS ${RUNNER}
#	COMMAND ${CMAKE_COMMAND} -E rename ${RUNNER} ${RUNNER}.exe
#	COMMENT "-- COPYING ${RUNNER} to ${RUNNER}.exe"
#	POST_BUILD
#)

ADD_CUSTOM_COMMAND(
	TARGET ${TARGET}
	DEPENDS ${TARGET}
	COMMAND ${CMAKE_COMMAND} -E rename ${TARGET} system/${TARGET}.exe
	COMMENT "-- COPYING ${TARGET} to ${TARGET}w"
	POST_BUILD
)
ADD_CUSTOM_COMMAND(
	TARGET ${RUNTIME}
	DEPENDS ${RUNTIME}
	COMMAND ${CMAKE_COMMAND} -E rename ${RUNTIME} system/${RUNTIME}.exe
	COMMENT "-- COPYING ${RUNTIME} to ${RUNTIME}w"
	POST_BUILD
)
ADD_CUSTOM_COMMAND(
	TARGET ${DEBUG}
	DEPENDS ${DEBUG}
	COMMAND ${CMAKE_COMMAND} -E rename ${DEBUG} system/${DEBUG}.exe
	COMMENT "-- COPYING ${DEBUG} to ${DEBUG}w"
	POST_BUILD
)

ELSE()
ADD_CUSTOM_COMMAND(
	TARGET ${TARGET}
	DEPENDS ${TARGET}
	COMMAND ${CMAKE_COMMAND} -E rename ${TARGET} system/${TARGET}
#	COMMAND upx -9 system/${TARGET} > /dev/null
	COMMENT "-- COPYING ${TARGET} to system/${TARGET}"
	POST_BUILD
)
ADD_CUSTOM_COMMAND(
	TARGET ${RUNTIME}
	DEPENDS ${RUNTIME}
	COMMAND ${CMAKE_COMMAND} -E rename ${RUNTIME} system/${RUNTIME}
#	COMMAND upx -9 system/${RUNTIME} >/dev/null
	COMMENT "-- COPYING ${RUNTIME} to system/${RUNTIME}"
	POST_BUILD
)
ADD_CUSTOM_COMMAND(
	TARGET ${DEBUG}
	DEPENDS ${DEBUG}
	COMMAND ${CMAKE_COMMAND} -E rename ${DEBUG} system/${DEBUG}
#	COMMAND upx -9 system/${DEBUG} >/dev/null
	COMMENT "-- COPYING ${DEBUG} to system/${DEBUG}"
	POST_BUILD
)
ENDIF()

#IF(DEBUG EQUAL 0) 
#ADD_CUSTOM_COMMAND(
#	TARGET ${TARGET}
#	DEPENDS ${TARGET}
#	COMMAND ${CMAKE_COMMAND} -E copy ${TARGET} fuzebasic-3/fuzebasic-3.0.0/fuze
#	COMMENT "-- Some package prep.."
#	POST_BUILD
#)
#ENDIF()

#IF(GTK EQUAL 3) 
#ENDIF()
